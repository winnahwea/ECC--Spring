package com.exercise.spring.config;

import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter{

	@Bean
	PasswordEncoder bycryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception{
		BCryptPasswordEncoder encoder= new BCryptPasswordEncoder();
		auth.inMemoryAuthentication()
		.withUser("user").password(encoder.encode("user")).roles("USER")
		.and()
		.withUser("admin").password(encoder.encode("admin")).roles("ADMIN");
		
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception{
		http
		.csrf().disable()
		.authorizeRequests()
		.antMatchers("/api/employee/all").hasAnyRole("ADMIN","USER")
		.antMatchers("/api/employee/{employeeId}").hasAnyRole("ADMIN","USER")
		.antMatchers("/api/employee/lastname").hasAnyRole("ADMIN","USER")
		.antMatchers(HttpMethod.POST,"/api/employee/add").hasRole("ADMIN")
		.antMatchers(HttpMethod.PUT,"/api/employee/update/{employeeId}").hasRole("ADMIN")
		.antMatchers(HttpMethod.DELETE,"/api/employee/delete/{employeeId}").hasRole("ADMIN")
		.antMatchers("/api/ticket/all").hasAnyRole("ADMIN","USER")
		.antMatchers("/api/ticket/{id}").hasAnyRole("ADMIN","USER")
		.antMatchers(HttpMethod.POST,"/api/ticket/add").hasAnyRole("ADMIN")
		.antMatchers(HttpMethod.PUT,"/api/ticket/update/{id}").hasAnyRole("ADMIN")
		.antMatchers(HttpMethod.DELETE,"/api/ticket/delete/{id}").hasAnyRole("ADMIN")
		.antMatchers("/api/department/all").hasAnyRole("ADMIN","USER")
		.antMatchers(HttpMethod.POST,"/api/department/add").hasAnyRole("ADMIN")
		.antMatchers(HttpMethod.POST,"/api/department/addTo/{employeeId}/{departmentId}").hasAnyRole("ADMIN")
		.antMatchers(HttpMethod.PUT,"/api/department/update/{departmentId}").hasAnyRole("ADMIN")
		.antMatchers(HttpMethod.DELETE,"/api/department/delete/{departmentId}").hasAnyRole("ADMIN")
		.antMatchers(HttpMethod.POST,"/api/department/deleteFrom/{employeeId}/{departmentId}").hasAnyRole("ADMIN")
		.anyRequest().authenticated().and().httpBasic();
	}

}
